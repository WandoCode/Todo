## TodoItem
### Caractéristiques
- keyID         
- *title*         
- description   
- notes  
- creationDate = Date       
- dueDate = Date
- priority      
- project 

### Methodes:   
- updateItem(*title*, description, notes, dueDate, priority, project): set each variable of TodoItems with the corresponding given ones.

- getBasics() : return an object with the "caractéristiques" of the TodoItem (Pour utiliser pour la sauvegarde). !!!!Utiliser la factory fct de BasicsDataObject au lieu de cette fct!!!!

## TodoList
### Caractéristiques:   
- maxKey = integer. Next key to add to a new TodoItem
- todoItemList = [TodoItem]

### Methods
- createTodoItem(BasicDatasObject): Add an item to this.todoItemList from the basicDatasObject.
        Set todoItem.key if needed and increment this.maxKey
        Return todoItem.key
- removeItem(key): remove the TodoItem object with the given key from todoItemList
- removeAllItem(): remove all item from the todoItemList
- getProjectsList(): return a list of all the different project of the object in the todoItemList
- getTodoItem(key): return the TodoItem from todoItemList with the given key (à utiliser pour mettre à jour les taches todo directement)
- updateTodoItem(key,*title*, description, notes, dueDate, priority, project): get the TodoItem with the given key using getTodoItem(key). Call updateItem(**) on that item to update his datas.
- getItemsProjectList(project): return list of TodoItem with the given project
- getTitleList(project): return a list of all the TodoItem.title in the todoItemList with the given TodoItem.project (don't forget the case where we want all the title without looking at the project - with an added paramater to the function i.e.) or for the TodoItem with no defined project)
- sortByPriority(): sort the todoItemList by TodoItem.priority
- sortByDate(): sort the todoItemList by TodoItem.creationDate

## Datas
Helpers function around the managment of the datas with localStorage

- loadDatas(): Load all datas with key begining with "todoItem-" from localStorage. return a list.

- initializeTodoItemList(dataList, todoListObject):  use todoListObject.createTodoItem() for each item of the dataList to populate todoItemList. 

- saveItem(item): Save todoItem in localStorage at the key "todoItem-{basicDatas.id}" after formating it in a basicDatasObject. Do not save a basicDatas with basicDatas.key=undefiened. if the key "todoItem-{basicDatas.id}" is already taken: replace the value by the new one

- removeItembyKey(key): remove the basicData with the key "todoItem-{key}"

## BasicsDataObject
### Caractéristiques
(Implementer la creation des objets avec une factory fct?)

- keyID         
- *title*         
- description   
- notes  
- creationDate = text (format date)       
- dueDate = text(format date)
- priority = text     
- project 

## App
Module with the helpers for the application
ATTENTION: le form qui va collecter les données doit comporter la clé des élément déjà connu. S'il s'agit d'un nouvel element , key = undefined

- isADate(text): verify the given parameter is a string with the correct format to use it with Date(). Return true or false.
- isATitle(text): verify the given parameter is a string not too long (max 20 letters) and contain at least 1 letter. Return true or false.
- isADescription(text): verify the given parameter is a string not too long(max 30 letters). Return true or false.
- isANote(text):  verify the given parameter is a string not too long(max 500 letters). Return true or false.
- isAPriority(num): verify the given parameter is the string of a positive integer. Return true or false.
- isAProject(text): verify the given parameter is a string not too long(max 30 letters). Return true or false.
- validateDatas(*title*, description, notes, creationDate, dueDate, priority, project): validate each datas by calling the right fct. Return true or false.

- makeBasicDatasObjectFromForm(key, *title*, description, notes, dueDate, priority, project):
Validate datas, return a basicDatasObject.
- addItemToTodoList(key, *title*, description, notes, dueDate, priority, project): make a basicDatasObject with makeBasicDatasObjectFromForm. Then use createTodoItem(basicDatasObject) to add a new item to todoList. Set the key returned by createTodoItem to basicDatasObject.key. Save that basicDatasObject.
- removeItemToTodoList(key): use removeItembyKey to remove item from localStorage, and removeItem to remove from todolist.
- updateTodoItem(key, *title*, description, notes, dueDate, priority, project): make a basicDatasObject with makeBasicDatasObjectFromForm. Then use todolist.updateTodoItem() and saveItem(basicDatasObject)


